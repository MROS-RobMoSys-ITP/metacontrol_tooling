/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mros.mros.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MROSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkillDefinitionSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSkillDefinitionSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSkillDefinitionSetSkillDefinitionParserRuleCall_2_0 = (RuleCall)cSkillDefinitionSetAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Model: //	{Model}
		//	"SkillDefinitionSet" '{' SkillDefinitionSet+=SkillDefinition* // ((';' SkillDefinitionSet+=SkillDefinition)*)?
		//	//+=SkillDefinition* 
		//	//c+=(Component) ((',' c+=Component)*)? 
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		////	{Model}
		//"SkillDefinitionSet" '{' SkillDefinitionSet+=SkillDefinition* // ((';' SkillDefinitionSet+=SkillDefinition)*)?
		////+=SkillDefinition* 
		////c+=(Component) ((',' c+=Component)*)? 
		//'}'
		public Group getGroup() { return cGroup; }
		
		////	{Model}
		//"SkillDefinitionSet"
		public Keyword getSkillDefinitionSetKeyword_0() { return cSkillDefinitionSetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//SkillDefinitionSet+=SkillDefinition*
		public Assignment getSkillDefinitionSetAssignment_2() { return cSkillDefinitionSetAssignment_2; }
		
		//SkillDefinition
		public RuleCall getSkillDefinitionSetSkillDefinitionParserRuleCall_2_0() { return cSkillDefinitionSetSkillDefinitionParserRuleCall_2_0; }
		
		//// ((';' SkillDefinitionSet+=SkillDefinition)*)?
		////+=SkillDefinition* 
		////c+=(Component) ((',' c+=Component)*)? 
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SkillDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.SkillDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQualityAttributesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cListqaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListqaQualityAttributeParserRuleCall_5_0 = (RuleCall)cListqaAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cListqaAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cListqaQualityAttributeParserRuleCall_6_1_0 = (RuleCall)cListqaAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInputKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cPAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cPParameterTypeParserRuleCall_8_2_0 = (RuleCall)cPAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cPAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cPParameterTypeParserRuleCall_8_3_1_0 = (RuleCall)cPAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOutputKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cPAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cPParameterTypeParserRuleCall_9_2_0 = (RuleCall)cPAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cPAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cPParameterTypeParserRuleCall_9_3_1_0 = (RuleCall)cPAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cResultKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cResultAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cResultResultTypeParserRuleCall_12_0 = (RuleCall)cResultAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cResultAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cResultResultTypeParserRuleCall_13_1_0 = (RuleCall)cResultAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cRealizationsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cRealizationsSkillRealizationParserRuleCall_15_0 = (RuleCall)cRealizationsAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//SkillDefinition:
		//	"Skill" name=ID
		//	'{' 'quality attributes' '[' listqa+=QualityAttribute (',' listqa+=QualityAttribute)* ']' ('input' '{'
		//	p+=ParameterType (',' p+=ParameterType)*
		//	'}')* ('output' '{'
		//	p+=ParameterType (',' p+=ParameterType)*
		//	'}')*
		//	'result' '{'
		//	result+=ResultType (',' result+=ResultType)*
		//	'}'
		//	realizations+=SkillRealization* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"Skill" name=ID '{' 'quality attributes' '[' listqa+=QualityAttribute (',' listqa+=QualityAttribute)* ']' ('input' '{'
		//p+=ParameterType (',' p+=ParameterType)* '}')* ('output' '{' p+=ParameterType (',' p+=ParameterType)* '}')* 'result'
		//'{' result+=ResultType (',' result+=ResultType)* '}' realizations+=SkillRealization* '}'
		public Group getGroup() { return cGroup; }
		
		//"Skill"
		public Keyword getSkillKeyword_0() { return cSkillKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'quality attributes'
		public Keyword getQualityAttributesKeyword_3() { return cQualityAttributesKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//listqa+=QualityAttribute
		public Assignment getListqaAssignment_5() { return cListqaAssignment_5; }
		
		//QualityAttribute
		public RuleCall getListqaQualityAttributeParserRuleCall_5_0() { return cListqaQualityAttributeParserRuleCall_5_0; }
		
		//(',' listqa+=QualityAttribute)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//listqa+=QualityAttribute
		public Assignment getListqaAssignment_6_1() { return cListqaAssignment_6_1; }
		
		//QualityAttribute
		public RuleCall getListqaQualityAttributeParserRuleCall_6_1_0() { return cListqaQualityAttributeParserRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//('input' '{' p+=ParameterType (',' p+=ParameterType)* '}')*
		public Group getGroup_8() { return cGroup_8; }
		
		//'input'
		public Keyword getInputKeyword_8_0() { return cInputKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//p+=ParameterType
		public Assignment getPAssignment_8_2() { return cPAssignment_8_2; }
		
		//ParameterType
		public RuleCall getPParameterTypeParserRuleCall_8_2_0() { return cPParameterTypeParserRuleCall_8_2_0; }
		
		//(',' p+=ParameterType)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//','
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//p+=ParameterType
		public Assignment getPAssignment_8_3_1() { return cPAssignment_8_3_1; }
		
		//ParameterType
		public RuleCall getPParameterTypeParserRuleCall_8_3_1_0() { return cPParameterTypeParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//('output' '{' p+=ParameterType (',' p+=ParameterType)* '}')*
		public Group getGroup_9() { return cGroup_9; }
		
		//'output'
		public Keyword getOutputKeyword_9_0() { return cOutputKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//p+=ParameterType
		public Assignment getPAssignment_9_2() { return cPAssignment_9_2; }
		
		//ParameterType
		public RuleCall getPParameterTypeParserRuleCall_9_2_0() { return cPParameterTypeParserRuleCall_9_2_0; }
		
		//(',' p+=ParameterType)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//','
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }
		
		//p+=ParameterType
		public Assignment getPAssignment_9_3_1() { return cPAssignment_9_3_1; }
		
		//ParameterType
		public RuleCall getPParameterTypeParserRuleCall_9_3_1_0() { return cPParameterTypeParserRuleCall_9_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
		
		//'result'
		public Keyword getResultKeyword_10() { return cResultKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//result+=ResultType
		public Assignment getResultAssignment_12() { return cResultAssignment_12; }
		
		//ResultType
		public RuleCall getResultResultTypeParserRuleCall_12_0() { return cResultResultTypeParserRuleCall_12_0; }
		
		//(',' result+=ResultType)*
		public Group getGroup_13() { return cGroup_13; }
		
		//','
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//result+=ResultType
		public Assignment getResultAssignment_13_1() { return cResultAssignment_13_1; }
		
		//ResultType
		public RuleCall getResultResultTypeParserRuleCall_13_1_0() { return cResultResultTypeParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//realizations+=SkillRealization*
		public Assignment getRealizationsAssignment_15() { return cRealizationsAssignment_15; }
		
		//SkillRealization
		public RuleCall getRealizationsSkillRealizationParserRuleCall_15_0() { return cRealizationsSkillRealizationParserRuleCall_15_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class ResultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ResultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSUCCESSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cERRORParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINPROGRESSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ResultType:
		//	SUCCESS | ERROR | INPROGRESS;
		@Override public ParserRule getRule() { return rule; }
		
		////status=STATUS
		//SUCCESS | ERROR | INPROGRESS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////status=STATUS
		//SUCCESS
		public RuleCall getSUCCESSParserRuleCall_0() { return cSUCCESSParserRuleCall_0; }
		
		//ERROR
		public RuleCall getERRORParserRuleCall_1() { return cERRORParserRuleCall_1; }
		
		//INPROGRESS
		public RuleCall getINPROGRESSParserRuleCall_2() { return cINPROGRESSParserRuleCall_2; }
	}
	public class SUCCESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.SUCCESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDoubleParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////STATUS:
		////'IN_ERROR_NFR' | 'IN_ERROR_COMPONENT' | 'UNREACHABLE' | 'IN_PROGRESS' | 'REACHABLE'
		////;
		//SUCCESS:
		//	'success' ':' value=STRING? value=Double?;
		@Override public ParserRule getRule() { return rule; }
		
		//'success' ':' value=STRING? value=Double?
		public Group getGroup() { return cGroup; }
		
		//'success'
		public Keyword getSuccessKeyword_0() { return cSuccessKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//value=Double?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_0() { return cValueDoubleParserRuleCall_3_0; }
	}
	public class ERRORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ERROR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDoubleParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ERROR:
		//	'error' ':' value=STRING? value=Double?;
		@Override public ParserRule getRule() { return rule; }
		
		//'error' ':' value=STRING? value=Double?
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//value=Double?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_0() { return cValueDoubleParserRuleCall_3_0; }
	}
	public class INPROGRESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.INPROGRESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInprogressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDoubleParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//INPROGRESS:
		//	'inprogress' ':' value=STRING? value=Double?;
		@Override public ParserRule getRule() { return rule; }
		
		//'inprogress' ':' value=STRING? value=Double?
		public Group getGroup() { return cGroup; }
		
		//'inprogress'
		public Keyword getInprogressKeyword_0() { return cInprogressKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//value=Double?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_0() { return cValueDoubleParserRuleCall_3_0; }
	}
	public class QualityAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.QualityAttribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameSafetyKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNamePerformanceKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameEnergyKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		////QualityType returns QualityType:
		////{QualityType}
		////	Safety | Performance | Energyefficiency | Accuracy
		////;
		//QualityAttribute:
		//	name=('safety' | 'performance' | 'energy');
		@Override public ParserRule getRule() { return rule; }
		
		////'name:' name=ID  ',' 'type:' 
		//name=('safety' | 'performance' | 'energy')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('safety' | 'performance' | 'energy')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'safety'
		public Keyword getNameSafetyKeyword_0_0() { return cNameSafetyKeyword_0_0; }
		
		//'performance'
		public Keyword getNamePerformanceKeyword_0_1() { return cNamePerformanceKeyword_0_1; }
		
		//'energy'
		public Keyword getNameEnergyKeyword_0_2() { return cNameEnergyKeyword_0_2; }
	}
	public class SkillRealizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.SkillRealization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCComponentParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCComponentParserRuleCall_4_1_0 = (RuleCall)cCAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cQualityKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQQualityModelParserRuleCall_5_2_0 = (RuleCall)cQAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cQAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cQQualityModelParserRuleCall_5_3_1_0 = (RuleCall)cQAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cSemicolonKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cContextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContextContextParserRuleCall_6_0 = (RuleCall)cContextAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Safety:
		////'safety'
		////;
		////Performance:
		////'performance'
		////;
		////Energyefficiency:
		////'energy'
		////;
		////Accuracy:
		////'accuracy'
		////;
		//SkillRealization:
		//	'Realization' name=ID '{' c+=Component (',' c+=Component)* ('Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']'
		//	';')? context=Context '}' ';'
		//	//('{' a=Action '}' )*
		//	//sm=SystemMode
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Realization' name=ID '{' c+=Component (',' c+=Component)* ('Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']'
		//';')? context=Context '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Realization'
		public Keyword getRealizationKeyword_0() { return cRealizationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//c+=Component
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Component
		public RuleCall getCComponentParserRuleCall_3_0() { return cCComponentParserRuleCall_3_0; }
		
		//(',' c+=Component)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//c+=Component
		public Assignment getCAssignment_4_1() { return cCAssignment_4_1; }
		
		//Component
		public RuleCall getCComponentParserRuleCall_4_1_0() { return cCComponentParserRuleCall_4_1_0; }
		
		//('Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']' ';')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Quality'
		public Keyword getQualityKeyword_5_0() { return cQualityKeyword_5_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_1() { return cLeftSquareBracketKeyword_5_1; }
		
		//q+=QualityModel
		public Assignment getQAssignment_5_2() { return cQAssignment_5_2; }
		
		//QualityModel
		public RuleCall getQQualityModelParserRuleCall_5_2_0() { return cQQualityModelParserRuleCall_5_2_0; }
		
		//(',' q+=QualityModel)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//q+=QualityModel
		public Assignment getQAssignment_5_3_1() { return cQAssignment_5_3_1; }
		
		//QualityModel
		public RuleCall getQQualityModelParserRuleCall_5_3_1_0() { return cQQualityModelParserRuleCall_5_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5_5() { return cSemicolonKeyword_5_5; }
		
		//context=Context
		public Assignment getContextAssignment_6() { return cContextAssignment_6; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_6_0() { return cContextContextParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeContextTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Context:
		//	'context:' type=ContextType;
		@Override public ParserRule getRule() { return rule; }
		
		//'context:' type=ContextType
		public Group getGroup() { return cGroup; }
		
		//'context:'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//type=ContextType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ContextType
		public RuleCall getTypeContextTypeParserRuleCall_1_0() { return cTypeContextTypeParserRuleCall_1_0; }
	}
	public class ContextTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ContextType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBatteryChargingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOnChargingStationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ContextType:
		//	'Default' | 'BatteryCharging' | 'OnChargingStation';
		@Override public ParserRule getRule() { return rule; }
		
		//'Default' | 'BatteryCharging' | 'OnChargingStation'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//'BatteryCharging'
		public Keyword getBatteryChargingKeyword_1() { return cBatteryChargingKeyword_1; }
		
		//'OnChargingStation'
		public Keyword getOnChargingStationKeyword_2() { return cOnChargingStationKeyword_2; }
	}
	public class SystemModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.SystemMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCComponentParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCComponentParserRuleCall_4_1_0 = (RuleCall)cCAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SystemMode:
		//	"SystemMode" name=ID '{' c+=Component (',' c+=Component)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"SystemMode" name=ID '{' c+=Component (',' c+=Component)* '}'
		public Group getGroup() { return cGroup; }
		
		//"SystemMode"
		public Keyword getSystemModeKeyword_0() { return cSystemModeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//c+=Component
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//Component
		public RuleCall getCComponentParserRuleCall_3_0() { return cCComponentParserRuleCall_3_0; }
		
		//(',' c+=Component)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//c+=Component
		public Assignment getCAssignment_4_1() { return cCAssignment_4_1; }
		
		//Component
		public RuleCall getCComponentParserRuleCall_4_1_0() { return cCComponentParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class QualityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.QualityModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQaQualityAttributeParserRuleCall_0_0 = (RuleCall)cQaAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQvalueDoubleParserRuleCall_2_0 = (RuleCall)cQvalueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEEnvironmentParserRuleCall_3_1_0 = (RuleCall)cEAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//QualityModel:
		//	qa=QualityAttribute ':' qvalue=Double ('<' e=Environment '>')*;
		@Override public ParserRule getRule() { return rule; }
		
		//qa=QualityAttribute ':' qvalue=Double ('<' e=Environment '>')*
		public Group getGroup() { return cGroup; }
		
		//qa=QualityAttribute
		public Assignment getQaAssignment_0() { return cQaAssignment_0; }
		
		//QualityAttribute
		public RuleCall getQaQualityAttributeParserRuleCall_0_0() { return cQaQualityAttributeParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//qvalue=Double
		public Assignment getQvalueAssignment_2() { return cQvalueAssignment_2; }
		
		//Double
		public RuleCall getQvalueDoubleParserRuleCall_2_0() { return cQvalueDoubleParserRuleCall_2_0; }
		
		//('<' e=Environment '>')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//e=Environment
		public Assignment getEAssignment_3_1() { return cEAssignment_3_1; }
		
		//Environment
		public RuleCall getEEnvironmentParserRuleCall_3_1_0() { return cEEnvironmentParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObservableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cObservableObservableKeyword_2_0 = (Keyword)cObservableAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPConfigurationParserRuleCall_4_0 = (RuleCall)cPAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPConfigurationParserRuleCall_5_1_0 = (RuleCall)cPAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Component:
		//	'Component' name=ID observable?='observable'? '{' p+=Configuration (',' p+=Configuration)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component' name=ID observable?='observable'? '{' p+=Configuration (',' p+=Configuration)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//observable?='observable'?
		public Assignment getObservableAssignment_2() { return cObservableAssignment_2; }
		
		//'observable'
		public Keyword getObservableObservableKeyword_2_0() { return cObservableObservableKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//p+=Configuration
		public Assignment getPAssignment_4() { return cPAssignment_4; }
		
		//Configuration
		public RuleCall getPConfigurationParserRuleCall_4_0() { return cPConfigurationParserRuleCall_4_0; }
		
		//(',' p+=Configuration)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//p+=Configuration
		public Assignment getPAssignment_5_1() { return cPAssignment_5_1; }
		
		//Configuration
		public RuleCall getPConfigurationParserRuleCall_5_1_0() { return cPConfigurationParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedModeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPParameterParserRuleCall_2_1_0 = (RuleCall)cPAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPParameterParserRuleCall_2_2_1_0 = (RuleCall)cPAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Configuration:
		//	'Configuration' name=QualifiedMode ('{' p+=Parameter (',' p+=Parameter)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Configuration' name=QualifiedMode ('{' p+=Parameter (',' p+=Parameter)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//name=QualifiedMode
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedMode
		public RuleCall getNameQualifiedModeParserRuleCall_1_0() { return cNameQualifiedModeParserRuleCall_1_0; }
		
		//('{' p+=Parameter (',' p+=Parameter)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//p+=Parameter
		public Assignment getPAssignment_2_1() { return cPAssignment_2_1; }
		
		//Parameter
		public RuleCall getPParameterParserRuleCall_2_1_0() { return cPParameterParserRuleCall_2_1_0; }
		
		//(',' p+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//p+=Parameter
		public Assignment getPAssignment_2_2_1() { return cPAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getPParameterParserRuleCall_2_2_1_0() { return cPParameterParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class QualifiedModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.QualifiedMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedMode:
		//	Mode ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Mode ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//Mode
		public RuleCall getModeParserRuleCall_0() { return cModeParserRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cActiveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInactiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUnconfiguredKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cConfiguredKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Mode:
		//	'active' | 'inactive' | 'unconfigured' | 'configured';
		@Override public ParserRule getRule() { return rule; }
		
		//'active' | 'inactive' | 'unconfigured' | 'configured'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'active'
		public Keyword getActiveKeyword_0() { return cActiveKeyword_0; }
		
		//'inactive'
		public Keyword getInactiveKeyword_1() { return cInactiveKeyword_1; }
		
		//'unconfigured'
		public Keyword getUnconfiguredKeyword_2() { return cUnconfiguredKeyword_2; }
		
		//'configured'
		public Keyword getConfiguredKeyword_3() { return cConfiguredKeyword_3; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterlistEnvironmentParameterParserRuleCall_3_0 = (RuleCall)cParameterlistAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterlistAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterlistEnvironmentParameterParserRuleCall_4_1_0 = (RuleCall)cParameterlistAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Environment:
		//	'environment' name=ID '{' parameterlist+=EnvironmentParameter (',' parameterlist+=EnvironmentParameter)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' name=ID '{' parameterlist+=EnvironmentParameter (',' parameterlist+=EnvironmentParameter)* '}'
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parameterlist+=EnvironmentParameter
		public Assignment getParameterlistAssignment_3() { return cParameterlistAssignment_3; }
		
		//EnvironmentParameter
		public RuleCall getParameterlistEnvironmentParameterParserRuleCall_3_0() { return cParameterlistEnvironmentParameterParserRuleCall_3_0; }
		
		//(',' parameterlist+=EnvironmentParameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameterlist+=EnvironmentParameter
		public Assignment getParameterlistAssignment_4_1() { return cParameterlistAssignment_4_1; }
		
		//EnvironmentParameter
		public RuleCall getParameterlistEnvironmentParameterParserRuleCall_4_1_0() { return cParameterlistEnvironmentParameterParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnvironmentParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.EnvironmentParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNarownessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClutternessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnvironmentParameter:
		//	Narowness | Clutterness;
		@Override public ParserRule getRule() { return rule; }
		
		//Narowness | Clutterness
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Narowness
		public RuleCall getNarownessParserRuleCall_0() { return cNarownessParserRuleCall_0; }
		
		//Clutterness
		public RuleCall getClutternessParserRuleCall_1() { return cClutternessParserRuleCall_1; }
	}
	public class NarownessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Narowness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNarownessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Narowness:
		//	'narowness:' value=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'narowness:' value=Double
		public Group getGroup() { return cGroup; }
		
		//'narowness:'
		public Keyword getNarownessKeyword_0() { return cNarownessKeyword_0; }
		
		//value=Double
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_1_0() { return cValueDoubleParserRuleCall_1_0; }
	}
	public class ClutternessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Clutterness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClutternessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Clutterness:
		//	'clutterness:' value=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'clutterness:' value=Double
		public Group getGroup() { return cGroup; }
		
		//'clutterness:'
		public Keyword getClutternessKeyword_0() { return cClutternessKeyword_0; }
		
		//value=Double
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_1_0() { return cValueDoubleParserRuleCall_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDoubleParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Parameter:
		//	name=QualifiedName ':' value=STRING? value=Double?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName ':' value=STRING? value=Double?
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//value=Double?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_0() { return cValueDoubleParserRuleCall_3_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Double:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class ActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ActionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGoalKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGoalAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGoalGoalDefinitionParserRuleCall_3_1_0 = (RuleCall)cGoalAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cResultKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResultResultDefinitionParserRuleCall_4_1_0 = (RuleCall)cResultAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFeedbackKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFeedbackAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFeedbackFeedbackParserRuleCall_5_1_0 = (RuleCall)cFeedbackAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ActionType:
		//	'ActionType'
		//	name=ID
		//	'{' ('goal' goal=GoalDefinition)? ('result' result=ResultDefinition)? ('feedback' feedback=Feedback)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ActionType' name=ID '{' ('goal' goal=GoalDefinition)? ('result' result=ResultDefinition)? ('feedback'
		//feedback=Feedback)? '}'
		public Group getGroup() { return cGroup; }
		
		//'ActionType'
		public Keyword getActionTypeKeyword_0() { return cActionTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('goal' goal=GoalDefinition)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'goal'
		public Keyword getGoalKeyword_3_0() { return cGoalKeyword_3_0; }
		
		//goal=GoalDefinition
		public Assignment getGoalAssignment_3_1() { return cGoalAssignment_3_1; }
		
		//GoalDefinition
		public RuleCall getGoalGoalDefinitionParserRuleCall_3_1_0() { return cGoalGoalDefinitionParserRuleCall_3_1_0; }
		
		//('result' result=ResultDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'result'
		public Keyword getResultKeyword_4_0() { return cResultKeyword_4_0; }
		
		//result=ResultDefinition
		public Assignment getResultAssignment_4_1() { return cResultAssignment_4_1; }
		
		//ResultDefinition
		public RuleCall getResultResultDefinitionParserRuleCall_4_1_0() { return cResultResultDefinitionParserRuleCall_4_1_0; }
		
		//('feedback' feedback=Feedback)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'feedback'
		public Keyword getFeedbackKeyword_5_0() { return cFeedbackKeyword_5_0; }
		
		//feedback=Feedback
		public Assignment getFeedbackAssignment_5_1() { return cFeedbackAssignment_5_1; }
		
		//Feedback
		public RuleCall getFeedbackFeedbackParserRuleCall_5_1_0() { return cFeedbackFeedbackParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GoalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.GoalDefinition");
		private final Assignment cGoalAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGoalMessageDefinitionParserRuleCall_0 = (RuleCall)cGoalAssignment.eContents().get(0);
		
		//GoalDefinition:
		//	goal=MessageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		////p=Package t=Type name=ID
		//goal=MessageDefinition
		public Assignment getGoalAssignment() { return cGoalAssignment; }
		
		//MessageDefinition
		public RuleCall getGoalMessageDefinitionParserRuleCall_0() { return cGoalMessageDefinitionParserRuleCall_0; }
	}
	public class ResultDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ResultDefinition");
		private final Assignment cResultAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cResultMessageDefinitionParserRuleCall_0 = (RuleCall)cResultAssignment.eContents().get(0);
		
		//ResultDefinition:
		//	result=MessageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//result=MessageDefinition
		public Assignment getResultAssignment() { return cResultAssignment; }
		
		//MessageDefinition
		public RuleCall getResultMessageDefinitionParserRuleCall_0() { return cResultMessageDefinitionParserRuleCall_0; }
	}
	public class FeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Feedback");
		private final Assignment cFeedbackAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeedbackMessageDefinitionParserRuleCall_0 = (RuleCall)cFeedbackAssignment.eContents().get(0);
		
		//Feedback:
		//	feedback=MessageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//feedback=MessageDefinition
		public Assignment getFeedbackAssignment() { return cFeedbackAssignment; }
		
		//MessageDefinition
		public RuleCall getFeedbackMessageDefinitionParserRuleCall_0() { return cFeedbackMessageDefinitionParserRuleCall_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIParameterParserRuleCall_3_0 = (RuleCall)cIAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAtActionTypeParserRuleCall_6_0 = (RuleCall)cAtAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cQualityKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cQAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cQQualityModelParserRuleCall_10_0 = (RuleCall)cQAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cQAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cQQualityModelParserRuleCall_11_1_0 = (RuleCall)cQAssignment_11_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Action:
		//	'action' name=ID "(" i=Parameter ")" '{' at=ActionType '}' 'Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID "(" i=Parameter ")" '{' at=ActionType '}' 'Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//i=Parameter
		public Assignment getIAssignment_3() { return cIAssignment_3; }
		
		//Parameter
		public RuleCall getIParameterParserRuleCall_3_0() { return cIParameterParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//at=ActionType
		public Assignment getAtAssignment_6() { return cAtAssignment_6; }
		
		//ActionType
		public RuleCall getAtActionTypeParserRuleCall_6_0() { return cAtActionTypeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'Quality'
		public Keyword getQualityKeyword_8() { return cQualityKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//q+=QualityModel
		public Assignment getQAssignment_10() { return cQAssignment_10; }
		
		//QualityModel
		public RuleCall getQQualityModelParserRuleCall_10_0() { return cQQualityModelParserRuleCall_10_0; }
		
		//(',' q+=QualityModel)*
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//q+=QualityModel
		public Assignment getQAssignment_11_1() { return cQAssignment_11_1; }
		
		//QualityModel
		public RuleCall getQQualityModelParserRuleCall_11_1_0() { return cQQualityModelParserRuleCall_11_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }
	}
	public class MessageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.MessageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMessagePartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMessagePartMessagePartParserRuleCall_1_0_0 = (RuleCall)cMessagePartAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMessagePartAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMessagePartMessagePartParserRuleCall_1_1_1_0 = (RuleCall)cMessagePartAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MessageDefinition:
		//	'{' (MessagePart+=MessagePart (',' MessagePart+=MessagePart)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (MessagePart+=MessagePart (',' MessagePart+=MessagePart)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(MessagePart+=MessagePart (',' MessagePart+=MessagePart)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//MessagePart+=MessagePart
		public Assignment getMessagePartAssignment_1_0() { return cMessagePartAssignment_1_0; }
		
		//MessagePart
		public RuleCall getMessagePartMessagePartParserRuleCall_1_0_0() { return cMessagePartMessagePartParserRuleCall_1_0_0; }
		
		//(',' MessagePart+=MessagePart)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//MessagePart+=MessagePart
		public Assignment getMessagePartAssignment_1_1_1() { return cMessagePartAssignment_1_1_1; }
		
		//MessagePart
		public RuleCall getMessagePartMessagePartParserRuleCall_1_1_1_0() { return cMessagePartMessagePartParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class MessagePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.MessagePart");
		private final Assignment cPAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPParameterTypeParserRuleCall_0 = (RuleCall)cPAssignment.eContents().get(0);
		
		//MessagePart Parameter:
		//	p=ParameterType;
		@Override public ParserRule getRule() { return rule; }
		
		////Type = AbstractType
		////Data = MESSAGE_ASIGMENT
		//p=ParameterType
		public Assignment getPAssignment() { return cPAssignment; }
		
		//ParameterType
		public RuleCall getPParameterTypeParserRuleCall_0() { return cPParameterTypeParserRuleCall_0; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.ParameterType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAbstractTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterType:
		//	name=ID ':' value=AbstractType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' value=AbstractType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=AbstractType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AbstractType
		public RuleCall getValueAbstractTypeParserRuleCall_2_0() { return cValueAbstractTypeParserRuleCall_2_0; }
	}
	public class AbstractTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.AbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPoseStampedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStringKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//AbstractType:
		//	'bool' | 'int' | 'float' | 'PoseStamped' | 'string';
		@Override public ParserRule getRule() { return rule; }
		
		//'bool' | 'int' | 'float' | 'PoseStamped' | 'string'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'bool'
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'PoseStamped'
		public Keyword getPoseStampedKeyword_3() { return cPoseStampedKeyword_3; }
		
		//'string'
		public Keyword getStringKeyword_4() { return cStringKeyword_4; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cResultKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFeedbackKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cValueKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cServiceKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTypeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cActionKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDurationKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cTimeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//KEYWORD String:
		//	'goal' | 'message' | 'result' | 'feedback' | 'name' | 'value' | 'service' | 'type' | 'action' | 'duration' | 'time';
		@Override public ParserRule getRule() { return rule; }
		
		//'goal' | 'message' | 'result' | 'feedback' | 'name' | 'value' | 'service' | 'type' | 'action' | 'duration' | 'time'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'goal'
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }
		
		//'message'
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }
		
		//'result'
		public Keyword getResultKeyword_2() { return cResultKeyword_2; }
		
		//'feedback'
		public Keyword getFeedbackKeyword_3() { return cFeedbackKeyword_3; }
		
		//'name'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//'value'
		public Keyword getValueKeyword_5() { return cValueKeyword_5; }
		
		//'service'
		public Keyword getServiceKeyword_6() { return cServiceKeyword_6; }
		
		//'type'
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
		
		//'action'
		public Keyword getActionKeyword_8() { return cActionKeyword_8; }
		
		//'duration'
		public Keyword getDurationKeyword_9() { return cDurationKeyword_9; }
		
		//'time'
		public Keyword getTimeKeyword_10() { return cTimeKeyword_10; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tMESSAGE_ASIGMENT;
	private final SkillDefinitionElements pSkillDefinition;
	private final ResultTypeElements pResultType;
	private final SUCCESSElements pSUCCESS;
	private final ERRORElements pERROR;
	private final INPROGRESSElements pINPROGRESS;
	private final QualityAttributeElements pQualityAttribute;
	private final SkillRealizationElements pSkillRealization;
	private final ContextElements pContext;
	private final ContextTypeElements pContextType;
	private final SystemModeElements pSystemMode;
	private final QualityModelElements pQualityModel;
	private final ComponentElements pComponent;
	private final ConfigurationElements pConfiguration;
	private final QualifiedModeElements pQualifiedMode;
	private final QualifiedNameElements pQualifiedName;
	private final ModeElements pMode;
	private final EnvironmentElements pEnvironment;
	private final EnvironmentParameterElements pEnvironmentParameter;
	private final NarownessElements pNarowness;
	private final ClutternessElements pClutterness;
	private final ParameterElements pParameter;
	private final DoubleElements pDouble;
	private final ActionTypeElements pActionType;
	private final GoalDefinitionElements pGoalDefinition;
	private final ResultDefinitionElements pResultDefinition;
	private final FeedbackElements pFeedback;
	private final ActionElements pAction;
	private final MessageDefinitionElements pMessageDefinition;
	private final MessagePartElements pMessagePart;
	private final ParameterTypeElements pParameterType;
	private final AbstractTypeElements pAbstractType;
	private final KEYWORDElements pKEYWORD;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MROSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tMESSAGE_ASIGMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mros.mros.MROS.MESSAGE_ASIGMENT");
		this.pSkillDefinition = new SkillDefinitionElements();
		this.pResultType = new ResultTypeElements();
		this.pSUCCESS = new SUCCESSElements();
		this.pERROR = new ERRORElements();
		this.pINPROGRESS = new INPROGRESSElements();
		this.pQualityAttribute = new QualityAttributeElements();
		this.pSkillRealization = new SkillRealizationElements();
		this.pContext = new ContextElements();
		this.pContextType = new ContextTypeElements();
		this.pSystemMode = new SystemModeElements();
		this.pQualityModel = new QualityModelElements();
		this.pComponent = new ComponentElements();
		this.pConfiguration = new ConfigurationElements();
		this.pQualifiedMode = new QualifiedModeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pMode = new ModeElements();
		this.pEnvironment = new EnvironmentElements();
		this.pEnvironmentParameter = new EnvironmentParameterElements();
		this.pNarowness = new NarownessElements();
		this.pClutterness = new ClutternessElements();
		this.pParameter = new ParameterElements();
		this.pDouble = new DoubleElements();
		this.pActionType = new ActionTypeElements();
		this.pGoalDefinition = new GoalDefinitionElements();
		this.pResultDefinition = new ResultDefinitionElements();
		this.pFeedback = new FeedbackElements();
		this.pAction = new ActionElements();
		this.pMessageDefinition = new MessageDefinitionElements();
		this.pMessagePart = new MessagePartElements();
		this.pParameterType = new ParameterTypeElements();
		this.pAbstractType = new AbstractTypeElements();
		this.pKEYWORD = new KEYWORDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mros.mros.MROS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: //	{Model}
	//	"SkillDefinitionSet" '{' SkillDefinitionSet+=SkillDefinition* // ((';' SkillDefinitionSet+=SkillDefinition)*)?
	//	//+=SkillDefinition* 
	//	//c+=(Component) ((',' c+=Component)*)? 
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal MESSAGE_ASIGMENT:
	//	(ID | STRING) '=' (ID | STRING | INT | '-' INT);
	public TerminalRule getMESSAGE_ASIGMENTRule() {
		return tMESSAGE_ASIGMENT;
	}
	
	//SkillDefinition:
	//	"Skill" name=ID
	//	'{' 'quality attributes' '[' listqa+=QualityAttribute (',' listqa+=QualityAttribute)* ']' ('input' '{'
	//	p+=ParameterType (',' p+=ParameterType)*
	//	'}')* ('output' '{'
	//	p+=ParameterType (',' p+=ParameterType)*
	//	'}')*
	//	'result' '{'
	//	result+=ResultType (',' result+=ResultType)*
	//	'}'
	//	realizations+=SkillRealization* '}';
	public SkillDefinitionElements getSkillDefinitionAccess() {
		return pSkillDefinition;
	}
	
	public ParserRule getSkillDefinitionRule() {
		return getSkillDefinitionAccess().getRule();
	}
	
	//ResultType:
	//	SUCCESS | ERROR | INPROGRESS;
	public ResultTypeElements getResultTypeAccess() {
		return pResultType;
	}
	
	public ParserRule getResultTypeRule() {
		return getResultTypeAccess().getRule();
	}
	
	////STATUS:
	////'IN_ERROR_NFR' | 'IN_ERROR_COMPONENT' | 'UNREACHABLE' | 'IN_PROGRESS' | 'REACHABLE'
	////;
	//SUCCESS:
	//	'success' ':' value=STRING? value=Double?;
	public SUCCESSElements getSUCCESSAccess() {
		return pSUCCESS;
	}
	
	public ParserRule getSUCCESSRule() {
		return getSUCCESSAccess().getRule();
	}
	
	//ERROR:
	//	'error' ':' value=STRING? value=Double?;
	public ERRORElements getERRORAccess() {
		return pERROR;
	}
	
	public ParserRule getERRORRule() {
		return getERRORAccess().getRule();
	}
	
	//INPROGRESS:
	//	'inprogress' ':' value=STRING? value=Double?;
	public INPROGRESSElements getINPROGRESSAccess() {
		return pINPROGRESS;
	}
	
	public ParserRule getINPROGRESSRule() {
		return getINPROGRESSAccess().getRule();
	}
	
	////QualityType returns QualityType:
	////{QualityType}
	////	Safety | Performance | Energyefficiency | Accuracy
	////;
	//QualityAttribute:
	//	name=('safety' | 'performance' | 'energy');
	public QualityAttributeElements getQualityAttributeAccess() {
		return pQualityAttribute;
	}
	
	public ParserRule getQualityAttributeRule() {
		return getQualityAttributeAccess().getRule();
	}
	
	////Safety:
	////'safety'
	////;
	////Performance:
	////'performance'
	////;
	////Energyefficiency:
	////'energy'
	////;
	////Accuracy:
	////'accuracy'
	////;
	//SkillRealization:
	//	'Realization' name=ID '{' c+=Component (',' c+=Component)* ('Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']'
	//	';')? context=Context '}' ';'
	//	//('{' a=Action '}' )*
	//	//sm=SystemMode
	//;
	public SkillRealizationElements getSkillRealizationAccess() {
		return pSkillRealization;
	}
	
	public ParserRule getSkillRealizationRule() {
		return getSkillRealizationAccess().getRule();
	}
	
	//Context:
	//	'context:' type=ContextType;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ContextType:
	//	'Default' | 'BatteryCharging' | 'OnChargingStation';
	public ContextTypeElements getContextTypeAccess() {
		return pContextType;
	}
	
	public ParserRule getContextTypeRule() {
		return getContextTypeAccess().getRule();
	}
	
	//SystemMode:
	//	"SystemMode" name=ID '{' c+=Component (',' c+=Component)* '}';
	public SystemModeElements getSystemModeAccess() {
		return pSystemMode;
	}
	
	public ParserRule getSystemModeRule() {
		return getSystemModeAccess().getRule();
	}
	
	//QualityModel:
	//	qa=QualityAttribute ':' qvalue=Double ('<' e=Environment '>')*;
	public QualityModelElements getQualityModelAccess() {
		return pQualityModel;
	}
	
	public ParserRule getQualityModelRule() {
		return getQualityModelAccess().getRule();
	}
	
	//Component:
	//	'Component' name=ID observable?='observable'? '{' p+=Configuration (',' p+=Configuration)* '}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Configuration:
	//	'Configuration' name=QualifiedMode ('{' p+=Parameter (',' p+=Parameter)* '}')?;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//QualifiedMode:
	//	Mode ('.' ID)*;
	public QualifiedModeElements getQualifiedModeAccess() {
		return pQualifiedMode;
	}
	
	public ParserRule getQualifiedModeRule() {
		return getQualifiedModeAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Mode:
	//	'active' | 'inactive' | 'unconfigured' | 'configured';
	public ModeElements getModeAccess() {
		return pMode;
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//Environment:
	//	'environment' name=ID '{' parameterlist+=EnvironmentParameter (',' parameterlist+=EnvironmentParameter)*
	//	'}';
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//EnvironmentParameter:
	//	Narowness | Clutterness;
	public EnvironmentParameterElements getEnvironmentParameterAccess() {
		return pEnvironmentParameter;
	}
	
	public ParserRule getEnvironmentParameterRule() {
		return getEnvironmentParameterAccess().getRule();
	}
	
	//Narowness:
	//	'narowness:' value=Double;
	public NarownessElements getNarownessAccess() {
		return pNarowness;
	}
	
	public ParserRule getNarownessRule() {
		return getNarownessAccess().getRule();
	}
	
	//Clutterness:
	//	'clutterness:' value=Double;
	public ClutternessElements getClutternessAccess() {
		return pClutterness;
	}
	
	public ParserRule getClutternessRule() {
		return getClutternessAccess().getRule();
	}
	
	//Parameter:
	//	name=QualifiedName ':' value=STRING? value=Double?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Double:
	//	'-'? INT ('.' INT)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//ActionType:
	//	'ActionType'
	//	name=ID
	//	'{' ('goal' goal=GoalDefinition)? ('result' result=ResultDefinition)? ('feedback' feedback=Feedback)?
	//	'}';
	public ActionTypeElements getActionTypeAccess() {
		return pActionType;
	}
	
	public ParserRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}
	
	//GoalDefinition:
	//	goal=MessageDefinition;
	public GoalDefinitionElements getGoalDefinitionAccess() {
		return pGoalDefinition;
	}
	
	public ParserRule getGoalDefinitionRule() {
		return getGoalDefinitionAccess().getRule();
	}
	
	//ResultDefinition:
	//	result=MessageDefinition;
	public ResultDefinitionElements getResultDefinitionAccess() {
		return pResultDefinition;
	}
	
	public ParserRule getResultDefinitionRule() {
		return getResultDefinitionAccess().getRule();
	}
	
	//Feedback:
	//	feedback=MessageDefinition;
	public FeedbackElements getFeedbackAccess() {
		return pFeedback;
	}
	
	public ParserRule getFeedbackRule() {
		return getFeedbackAccess().getRule();
	}
	
	//Action:
	//	'action' name=ID "(" i=Parameter ")" '{' at=ActionType '}' 'Quality' '[' q+=QualityModel (',' q+=QualityModel)* ']';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//MessageDefinition:
	//	'{' (MessagePart+=MessagePart (',' MessagePart+=MessagePart)*)?
	//	'}';
	public MessageDefinitionElements getMessageDefinitionAccess() {
		return pMessageDefinition;
	}
	
	public ParserRule getMessageDefinitionRule() {
		return getMessageDefinitionAccess().getRule();
	}
	
	//MessagePart Parameter:
	//	p=ParameterType;
	public MessagePartElements getMessagePartAccess() {
		return pMessagePart;
	}
	
	public ParserRule getMessagePartRule() {
		return getMessagePartAccess().getRule();
	}
	
	//ParameterType:
	//	name=ID ':' value=AbstractType;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//AbstractType:
	//	'bool' | 'int' | 'float' | 'PoseStamped' | 'string';
	public AbstractTypeElements getAbstractTypeAccess() {
		return pAbstractType;
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}
	
	//KEYWORD String:
	//	'goal' | 'message' | 'result' | 'feedback' | 'name' | 'value' | 'service' | 'type' | 'action' | 'duration' | 'time';
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
