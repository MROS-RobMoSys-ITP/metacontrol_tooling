/**
 * generated by Xtext 2.21.0
 */
package org.xtext.mros.mros.mROS.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.mros.mros.mROS.Action;
import org.xtext.mros.mros.mROS.ActionType;
import org.xtext.mros.mros.mROS.Clutterness;
import org.xtext.mros.mros.mROS.Component;
import org.xtext.mros.mros.mROS.Configuration;
import org.xtext.mros.mros.mROS.Context;
import org.xtext.mros.mros.mROS.ERROR;
import org.xtext.mros.mros.mROS.Environment;
import org.xtext.mros.mros.mROS.EnvironmentParameter;
import org.xtext.mros.mros.mROS.Feedback;
import org.xtext.mros.mros.mROS.GoalDefinition;
import org.xtext.mros.mros.mROS.INPROGRESS;
import org.xtext.mros.mros.mROS.MROSFactory;
import org.xtext.mros.mros.mROS.MROSPackage;
import org.xtext.mros.mros.mROS.MessageDefinition;
import org.xtext.mros.mros.mROS.Model;
import org.xtext.mros.mros.mROS.Narowness;
import org.xtext.mros.mros.mROS.Parameter;
import org.xtext.mros.mros.mROS.ParameterType;
import org.xtext.mros.mros.mROS.QualityAttribute;
import org.xtext.mros.mros.mROS.QualityModel;
import org.xtext.mros.mros.mROS.ResultDefinition;
import org.xtext.mros.mros.mROS.ResultType;
import org.xtext.mros.mros.mROS.SUCCESS;
import org.xtext.mros.mros.mROS.SkillDefinition;
import org.xtext.mros.mros.mROS.SkillRealization;
import org.xtext.mros.mros.mROS.SystemMode;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MROSFactoryImpl extends EFactoryImpl implements MROSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MROSFactory init()
  {
    try
    {
      MROSFactory theMROSFactory = (MROSFactory)EPackage.Registry.INSTANCE.getEFactory(MROSPackage.eNS_URI);
      if (theMROSFactory != null)
      {
        return theMROSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MROSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MROSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MROSPackage.MODEL: return createModel();
      case MROSPackage.SKILL_DEFINITION: return createSkillDefinition();
      case MROSPackage.RESULT_TYPE: return createResultType();
      case MROSPackage.SUCCESS: return createSUCCESS();
      case MROSPackage.ERROR: return createERROR();
      case MROSPackage.INPROGRESS: return createINPROGRESS();
      case MROSPackage.QUALITY_ATTRIBUTE: return createQualityAttribute();
      case MROSPackage.SKILL_REALIZATION: return createSkillRealization();
      case MROSPackage.CONTEXT: return createContext();
      case MROSPackage.SYSTEM_MODE: return createSystemMode();
      case MROSPackage.QUALITY_MODEL: return createQualityModel();
      case MROSPackage.COMPONENT: return createComponent();
      case MROSPackage.CONFIGURATION: return createConfiguration();
      case MROSPackage.ENVIRONMENT: return createEnvironment();
      case MROSPackage.ENVIRONMENT_PARAMETER: return createEnvironmentParameter();
      case MROSPackage.NAROWNESS: return createNarowness();
      case MROSPackage.CLUTTERNESS: return createClutterness();
      case MROSPackage.PARAMETER: return createParameter();
      case MROSPackage.ACTION_TYPE: return createActionType();
      case MROSPackage.GOAL_DEFINITION: return createGoalDefinition();
      case MROSPackage.RESULT_DEFINITION: return createResultDefinition();
      case MROSPackage.FEEDBACK: return createFeedback();
      case MROSPackage.ACTION: return createAction();
      case MROSPackage.MESSAGE_DEFINITION: return createMessageDefinition();
      case MROSPackage.PARAMETER_TYPE: return createParameterType();
      case MROSPackage.STRING: return createString();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SkillDefinition createSkillDefinition()
  {
    SkillDefinitionImpl skillDefinition = new SkillDefinitionImpl();
    return skillDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResultType createResultType()
  {
    ResultTypeImpl resultType = new ResultTypeImpl();
    return resultType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUCCESS createSUCCESS()
  {
    SUCCESSImpl success = new SUCCESSImpl();
    return success;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ERROR createERROR()
  {
    ERRORImpl error = new ERRORImpl();
    return error;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public INPROGRESS createINPROGRESS()
  {
    INPROGRESSImpl inprogress = new INPROGRESSImpl();
    return inprogress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualityAttribute createQualityAttribute()
  {
    QualityAttributeImpl qualityAttribute = new QualityAttributeImpl();
    return qualityAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SkillRealization createSkillRealization()
  {
    SkillRealizationImpl skillRealization = new SkillRealizationImpl();
    return skillRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemMode createSystemMode()
  {
    SystemModeImpl systemMode = new SystemModeImpl();
    return systemMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualityModel createQualityModel()
  {
    QualityModelImpl qualityModel = new QualityModelImpl();
    return qualityModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configuration createConfiguration()
  {
    ConfigurationImpl configuration = new ConfigurationImpl();
    return configuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentParameter createEnvironmentParameter()
  {
    EnvironmentParameterImpl environmentParameter = new EnvironmentParameterImpl();
    return environmentParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Narowness createNarowness()
  {
    NarownessImpl narowness = new NarownessImpl();
    return narowness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clutterness createClutterness()
  {
    ClutternessImpl clutterness = new ClutternessImpl();
    return clutterness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionType createActionType()
  {
    ActionTypeImpl actionType = new ActionTypeImpl();
    return actionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GoalDefinition createGoalDefinition()
  {
    GoalDefinitionImpl goalDefinition = new GoalDefinitionImpl();
    return goalDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResultDefinition createResultDefinition()
  {
    ResultDefinitionImpl resultDefinition = new ResultDefinitionImpl();
    return resultDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feedback createFeedback()
  {
    FeedbackImpl feedback = new FeedbackImpl();
    return feedback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageDefinition createMessageDefinition()
  {
    MessageDefinitionImpl messageDefinition = new MessageDefinitionImpl();
    return messageDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterType createParameterType()
  {
    ParameterTypeImpl parameterType = new ParameterTypeImpl();
    return parameterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.mros.mros.mROS.String createString()
  {
    StringImpl string = new StringImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MROSPackage getMROSPackage()
  {
    return (MROSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MROSPackage getPackage()
  {
    return MROSPackage.eINSTANCE;
  }

} //MROSFactoryImpl
