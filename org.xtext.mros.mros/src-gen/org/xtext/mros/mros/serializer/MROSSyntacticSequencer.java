/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mros.mros.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.mros.mros.services.MROSGrammarAccess;

@SuppressWarnings("all")
public class MROSSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MROSGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ERROR_INPROGRESS_SUCCESS___ErrorKeyword_0_ColonKeyword_1___or___InprogressKeyword_0_ColonKeyword_1___or___SuccessKeyword_0_ColonKeyword_1__;
	protected AbstractElementAlias match_KEYWORD_ActionKeyword_8_or_DurationKeyword_9_or_FeedbackKeyword_3_or_GoalKeyword_0_or_MessageKeyword_1_or_NameKeyword_4_or_ResultKeyword_2_or_ServiceKeyword_6_or_TimeKeyword_10_or_TypeKeyword_7_or_ValueKeyword_5;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MROSGrammarAccess) access;
		match_ERROR_INPROGRESS_SUCCESS___ErrorKeyword_0_ColonKeyword_1___or___InprogressKeyword_0_ColonKeyword_1___or___SuccessKeyword_0_ColonKeyword_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getERRORAccess().getErrorKeyword_0()), new TokenAlias(false, false, grammarAccess.getERRORAccess().getColonKeyword_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getINPROGRESSAccess().getInprogressKeyword_0()), new TokenAlias(false, false, grammarAccess.getINPROGRESSAccess().getColonKeyword_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSUCCESSAccess().getSuccessKeyword_0()), new TokenAlias(false, false, grammarAccess.getSUCCESSAccess().getColonKeyword_1())));
		match_KEYWORD_ActionKeyword_8_or_DurationKeyword_9_or_FeedbackKeyword_3_or_GoalKeyword_0_or_MessageKeyword_1_or_NameKeyword_4_or_ResultKeyword_2_or_ServiceKeyword_6_or_TimeKeyword_10_or_TypeKeyword_7_or_ValueKeyword_5 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getActionKeyword_8()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getDurationKeyword_9()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getFeedbackKeyword_3()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getGoalKeyword_0()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getMessageKeyword_1()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getNameKeyword_4()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getResultKeyword_2()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getServiceKeyword_6()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getTimeKeyword_10()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getTypeKeyword_7()), new TokenAlias(false, false, grammarAccess.getKEYWORDAccess().getValueKeyword_5()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ERROR_INPROGRESS_SUCCESS___ErrorKeyword_0_ColonKeyword_1___or___InprogressKeyword_0_ColonKeyword_1___or___SuccessKeyword_0_ColonKeyword_1__.equals(syntax))
				emit_ERROR_INPROGRESS_SUCCESS___ErrorKeyword_0_ColonKeyword_1___or___InprogressKeyword_0_ColonKeyword_1___or___SuccessKeyword_0_ColonKeyword_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KEYWORD_ActionKeyword_8_or_DurationKeyword_9_or_FeedbackKeyword_3_or_GoalKeyword_0_or_MessageKeyword_1_or_NameKeyword_4_or_ResultKeyword_2_or_ServiceKeyword_6_or_TimeKeyword_10_or_TypeKeyword_7_or_ValueKeyword_5.equals(syntax))
				emit_KEYWORD_ActionKeyword_8_or_DurationKeyword_9_or_FeedbackKeyword_3_or_GoalKeyword_0_or_MessageKeyword_1_or_NameKeyword_4_or_ResultKeyword_2_or_ServiceKeyword_6_or_TimeKeyword_10_or_TypeKeyword_7_or_ValueKeyword_5(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('success' ':') | ('error' ':') | ('inprogress' ':')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ERROR_INPROGRESS_SUCCESS___ErrorKeyword_0_ColonKeyword_1___or___InprogressKeyword_0_ColonKeyword_1___or___SuccessKeyword_0_ColonKeyword_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'goal' | 
	  *         'message' | 
	  *         'result' | 
	  *         'feedback' | 
	  *         'name' | 
	  *         'value' | 
	  *         'service' | 
	  *         'type' | 
	  *         'action' | 
	  *         'duration' | 
	  *         'time'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_KEYWORD_ActionKeyword_8_or_DurationKeyword_9_or_FeedbackKeyword_3_or_GoalKeyword_0_or_MessageKeyword_1_or_NameKeyword_4_or_ResultKeyword_2_or_ServiceKeyword_6_or_TimeKeyword_10_or_TypeKeyword_7_or_ValueKeyword_5(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
